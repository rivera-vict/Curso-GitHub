<!---->


<!--
	Revisar la siguiente extension para VSC:
		GitLens
	
	Revisar el siguiente programa de escritorio para manejar los repositorios:
		Sourcetree
-->


<!--
	Registrarse como estudiante en la siguiente pagina de GitHub:
	https://education.github.com/pack
-->


<!--
	SIGLAS:
		CLI		= Command Line Interface
		cd		= Change Directory
		mkdir	= Make Directory
		rmdir	= Remove Directory
		init	= Initialize
-->

<!--
	USO/FUNCION:
		ls						-> Muestra todas la carpetas y archivos de un directorio
		ls -a					-> Muestra todas la carpetas y archivos de un directorio que estan ocultos
		ls -ltr					-> Para listar el contenido
		pwd						-> Muestra la ubicacion de donde estamos en el directorio
		cd 'nombreCarpeta'		-> Para ingresar a la carpeta asignada
		cd 'nombre Carpeta'		-> Para ingresar a la carpeta asignada
		cd ..					-> Salir del direcctorio que esta en 1 para atras
		mkdir 'nombreCarpeta'	-> Crear carpeta
		rmdir 'nombreCarpeta'	-> Elimina una carpeta.
		clear					-> Limpia el historial de la pantalla
		touch 'nombreArchivo'	-> Crea un archivo. Hay que especificar con la extension
-->


<!--
	¿QUE ES GIT?
	Sistema de control de versiones que nos permite rastrear los cambios que hemos hecho en un conjunto de archivos.

	¿QUE ES GITHUB?
	Servicio de hosting que nos permite almacenar proyectos de desarrollo de software y control de versiones usando git.
	Plataforma que aloja proyectos en la nube utilizando el sistema de control de versiones.

	CONTROL DE VERSIONES
	Sistema encargado de administrar los cambios realizados en programas de computadora o conjuntos de archivos.

	REPOSITORIO
	Coleccion de archivos de distintas versiones de un proyecto.
		- Local
		- Remoto
	
	COMMIT
	Componentes basicos de la linea del tiempo de un proyecto de git.

	GIT BASH
	Herramienta que permite ejecutar comandos de GIT. Es una linea de comandos.

	CLONAR
	Crear una copia local de un repositorio remoto, incluyento sus versiones e historial de commits.

	ORIGIN
	Nombre que comunmente le asignamos al repositorio remoto que clonamos.

	RAMA (BRANCH)
	Una rama en Git es una linea independiente de desarrollo en el repositorio.

	GIT PUSH
	Comando usado para enviar los cambios realizados en un repositorio local a un repositorio remoto para que ambos tengan la misma informacion.

	GIT PULL
	Comando usado para descargar el contenido de un repositorio remoto e inmediatamente actualizar el repositorio local para que ambos tengan la misma informacion.

	GIT FETCH
	Comando usando para verificar los cambios realizados en el repositorio remoto sin combinar esos cambios con el repositorio local.
	Te permite saber si se han realizados cambios en el repositorio remoto desde la ultima vez que actualizaste tu repositorio local con git pull.

	BIFURCAR UN REPOSITORIO
	Crea una copia del repositorio remoto en tu cuenta de GitHub

	PULL REQUEST
	Solicitud para integrar nuestros cambios en una rama diferente, promueve el trabajo en equipo y la colaboracion para mejorar el codigo.

	CODE REVIEW
	Proceso por el cual se examina el codigo que se quiere integrar y se brinda retroalimentacion sobre el.
-->


<!--
	DESCARGAR GIT PARA WINDOWS:
		- Pagina oficial: https://git-scm.com/
		- Ubicarse en la imagen de PC, click en el boton 'Download for Windows', te llevara a otra pagina.
		- Clic en: 'Click here to download', comenzara la descarga.
	
	INSTALAR:
		- Doble click en el archivo descargado.
		- Click en el boton 'Next', para aceptar la licencia.
		- Click en el boton 'Next', para aceptar la ubicacion donde se instalara.
		- Click en la casilla 'On the desktop', para agregar el icono en el escritorio. Click en el boton 'Next'.
		- Click en el boton 'Next', para ver los atajos.
		- Seleccionar un editor por defecto, en este caso sera 'Use Visual Studio Code as Gits default editor'. Click en el boton 'Next'.
		+ Seleccionar el nombre de la rama inicial de nuestros repositorios. Por defecto viene con el nombre de 'master'.
			- Seleccionar la opcion 'Override the default branch name for new repositories', y dejar el nombre 'main'. Click en el boton 'Next'.
		- Seleccionar el ajuste el PATH para el entorno. Dejar por defecto 'Git from the command line and from 3rd-party software' y click en el boton 'Next'.
		- Seleccionar por defecto 'Use blundled OpenSSH', click en el boton 'Next'.
		- Seleccionar por defecto 'Use the OpenSSL library', click en el boton 'Next'.
		- Seleccionar por defecto 'Checkout Windows-style, commit Unix-style line endings', click en el boton 'Next'.
		- Seleccionar por defecto el emulador del terminal con Git Bash'Use MinTTY (the default terminal of MSYS2)', click en el boton 'Next'.
		- Seleccionar por defecto 'Default (fast-forward or merge)', click en el boton 'Next'.
		- Seleccionar por defecto el administrador de credenciales 'Git Credential Manager', click en el boton 'Next'.
		- Seleccionar por defecto la casilla 'Enable file system caching', click en el boton 'Next'.
		- Dejar sin marcar las casillas, click en el boton 'Install'.
		- Marcar las dos casillas: 'Launch Git Bash', y 'View Release Notes', click en el boton 'Finish'.
	
	EMPEZAR A USAR GIT BASH
		- En el buscado de Windows, escribir Git, hasta que aparezca 'Git Bash'.
		- Para hacer mas grande la letra, con CTRL + MOUSE.
-->


<!--
	CAMBIAR CREDENCIALES DE 'Git Bash Here' EN WINDOWS PARA INGRESAR DE OTRA CUENTA
	Ingresar en el buscador la siguiente ruta: Panel de control - Cuentas de usuario - Administrador de credenciales
	Clic en el icono que dice: Credenciales de windows
	Mas abajo donde dice: Credenciales genericas, buscamos git:https://github.com y desplazamos para abrir 
	Clic en el icono: Quitar
-->


<!--
	DESCARGAR GIT PARA DEBIAN/UBUNTU:
		- Pagina oficial: https://git-scm.com/
		- Ubicarse en la imagen de PC, click en el boton 'Download for Linux', te llevara a otra pagina.

	INSTALAR CON LINEA DE COMANDO EN LA TERMINAL:
		sudo su							-> Ingresar al usuario root, digitar la clave del SO
		apt-get update					-> Actualizar
		apt-get upgrade -y				-> Actualizar
		apt-get install git				-> Instalar Git (Primera opcion)
		
		sudo apt install git-all		-> Instalar Git (Segunda opcion)

	En el caso que haya problemas con la instalacion
		sudo apt --fix-broken install	->
	
	Opciones para instalar interface - no es obligatorio la instalacion
		sudo apt install gitg			-> Para escritorio gnome
		sudo apt install gitk			-> Para escritorio kde
		sudo apt install gitg gitk		-> Para escritorios con gnome y kde

	Instalar para hacer comparacion de codigo - no es obligatorio la instalacion
	Despues de la instalacion tocaria hacer una configuracion. Link del video: https://www.youtube.com/watch?v=5zM5cv1Gz34
		sudo apt install meld
	
	
	INSTALAR CON LINEA DE COMANDO EN LA TERMINAL: PARA FEDORA
		yum install git		#Fedora 21 y anterior
		dnf install git		#Fedora >= 22
-->


<!--
	DESCARGAR GIT PARA MAC
		- brew install git
-->


<!--
	Para ver la version de Git Bash - Las dos opciones es igual
		git --version
		git -v
-->


<!--Git Bash (Bourne - Again Shell)-->

<!--Para cambiar el tema-->
		posh-git
<!--Instalar en Power Shell de Windows>
		Install-Module posh-git


<!--
	Antes de comenzar a usar Git, es recomendable que hagas una mínima configuración.
	
	
	Configurar el nombre en modo global. El global es para todos los proyectos/repositorios. El nombre es para que se muestre en los commit o en nuestro cambios
		git config --global user.name "Victor Rivera"

	Configurar el nombre solo para un repositorio, no global
		git config user.name "Victor Rivera"

	Consultar el nombre que se registro/asigno
		git config user.name



	Configurar/Asignar el correo para todos los repositorios
		git config --global user.email "libreriadevictor@gmail.com"

	Configurar/Asignar el correo para un solo repositorio-->
		git config user.email "libreriadevictor@gmail.com"

	Consultar el email que esta registrado en los repositorios
		git config user.email
-->


<!--
	Estable como editor de texto predeterminado o cambiar el actual
		git config --global core.editor "code --wait"			-> Visual Studio Code
		git config --global core.editor "atom --wait"			-> Atom
		git config --global core.editor "subl -n -w"			-> Sublime Text
		git config --global core.editor "mate -w"				-> TextMate
		git config --global core.editor "nano"					-> Nano

	Cambiar el editor de texto a notepad
		git config --global core.editor C:/Windows/System32/notepad.exe
	
	Para abrir la carpeta en donde me encuentro con Visual Studio Code
		code .
-->


<!--
	Revisar qué configuración estás utilizando actualmente:
		git config --list				-> Para mostrar todas las opciones
		git config --global --list		-> Para mostrar sólo la configuración global
		git config --local --list		-> Para mostrar la configuración del repositorio local (si existe)
		git config --system --list		-> Muestra la configuración del git del sistema (si existe)
	
	Alternativamente, puedes usar el parámetro --show-scope para saber de dónde proviene cada configuración:
		git config --list --show-scope

	Muesta la configuracion de git ingresada en el editor de texto (visual studio code).
		git config --global -e
-->

<!--
	Salto de linea en windows son dos caracteres
		- CR Carriage Return
		- LF Line Feed
		
	Salto de linea en Linux con caracteres>
		- LF Line Feed
-->


<!-- El valor de la variable para los salto de linea en Windows/Linux-->
<!-- Para quienes esten en windows es true-->
<!-- Para quienes esten en linux es input-->
	git config --global core.autocrlfr true


<!--
	Para crear/iniciar el proyecto/repositorio. Se creara una carpeta oculta con el nombre de .git
		git init 			->
		git init .			-> Tambien se crea utilizando el punto
		git init --bare		-> Para iniciar el proyecto/repositorio desde un servidor
	
	Para crear/iniciar el proyecto/repositorio. Podemos crear la carpeta principal en conjunto
		git init nombre_carpeta_proyecto
		cd nombre_carpeta_proyecto
-->


<!--
	Cambiar la rama de master a main. Al crear un nuevo repositorio se creara con main
		git config --global init.defaultBranch main
	
	En el caso que ingreso al git y se olvido cambiar la rama
		git branch - M main
-->


<!--
	TRES AREAS/ESTADOS EN GIT:
		- Directorio/Area de trabajo.- La carpeta del proyecto que contiene los archivos y el directorio .git del repositorio.
			Modificada (Modified).- Si la version del archivo contiene cambios que NO son parte del repositorio y NO se ha añadido al area de preparacion.
				(Utilizamos el 'git add', para pasarnos a la otra area)
		- Area de programacion/preparacion (Staging de Area).- Conjunto de archivos y cambios que seran incluidos en el proximo commit. 
			Preparada (Staged).- Si la verion del archivo contiene cambios que NO son parte del repositio pero fue añadida al area de preparacion.
				(Utilizamos el 'git commit', para pasarnos a la otra area)
		- Area de Repositorio (directorio .git).- Directorio que contiene los metadatos y las versiones de tu proyecto.
			Confirmada (Committed).- Si la version del archivo ya se encuentra en el directorio de Git.
-->


<!--
	Muestra el estado real del repositorio. Dos opciones:
		git status
		git status -s		-> El parámetro -s es la forma corta de usar la opción --short
-->


<!--
	Nos permite borrar todos los archivos que todavía no han sido rastreados por Git.
		git clean
	
	Lo que nos ofrecen las opciones:
		-n para ejecutar un dry-run. Esto hará que se ejecute el comando y te diga cuál sería el resultado de borrar los archivos... ¡sin borrarlos!
		-f forzar el borrado de los archivos.
		-d para borrar también directorios que no existían antes.
		-i para que te pregunte antes de borrar cada archivo.
-->


<!--
	Agregamos archivo/s al proceso de preparacion para hacer commit. Añadir al área de staging.
	De la misma manera se hace con archivos que se modifican que ya se hicieron COMMIT anteriormente
		git add nombreArchivo.txt							-> Agregar un archivo
		git add nombreArchivo1.txt nombreArchivo2.txt		-> Agregar varios archivos
		git add *.txt										-> Agregar varios archivos indicando la extension del documento
		git add .											-> Agrega todos los archivo indicando el punto como extension

	Añadir todos los ficheros modificados:
		git add --all
		git add -A
		

	Quita el archivo del seguimiento de Git. Realiza un reverso del git add.
	De esta forma, ese fichero se eliminará del repositorio, se añadirá al historial de cambios, pero no se borrará del directorio de trabajo.
		git rm --cached 'nombreArchivo.txt'
	
	
	Borrar una carpeta y todos los ficheros que lo contiene, puedes utilizar el comando.
	La -r indica que se borrará la carpeta y todos sus ficheros de forma recursiva.
		git rm -r
-->


<!--
	¿QUE ES UN COMMIT?
	Componente basico de la linea del tiempo de un proyecto de Git.
	Es un registro o foto del estado de un proyecto en un momento especifico.
	Registra los cambios que se realizaron en los archivos en comparacion con la version anterior.

	Git le asigna a cada COMMIT un identificar unico llamado SHA (Secure Hash Algorithm) o hash.

	Hacer un COMMIT:
		git commit -m "Frase relacionada con el cambio guardado"
		git commit -m 'Mi primer commit' -m 'Creando pagina web'	-> Podemos usar mas de un -m
		git commit					-> Se mostrara la ventana de VSC y ahi escribimos la frase relacionada con el cambio a guardar y despues guardamos y cerrar.
		git commit -a				-> Es para guardar y colocar un mensaje relacionado al cambio. Se abrira el editor de texto para guardar el mensaje del cambio.
		git commit --all
	Dos opciones pero se usa la segunda:
	Esto sólo funciona para archivos modificados.
	Si es la primera vez que los has creado, vas a tener que añadirlos manualmente al área de staging con git add antes de poder usar git commit.
		git commit -a -m			-> "Mensaje de cambios o comentario" -> Agregar, pasar al commit, e insertar el comentario
		git commit -am
-->


<!--
	Ignorar un archivo para que no lo tome en cuenta el commit
	Crear el archivo:
		touch .gitignore
	
	Dentro del documento escribimos con los ** decimos que puede estar en cualquier parte del proyecto debe ignorar el archivo
	Ejemplo, escribimos dentro del documento:
		**/.nombreArchivo
		**/.DS_Store
	
	A este archivo .gitignore toca añadir y hacer el commit
		git add .gitignore
		git commit -m 'Se añade el .gitignore'
		git pull main
		git push origin main
	
	¿Qué archivos y carpetas deberías colocar aquí? Aquí te dejo una lista:
		Archivos que tengan credenciales o llaves de API (no deberías subirlas al repositorio, simplemente inyectarlas por variable de entorno)
		Carpetas de configuración de tu editor (/.vscode)
		Archivos de registro (log files)
		Archivos de sistema como .DS_Store
		Carpetas generadas con archivos estáticos o compilaciones como /dist o /build
		Dependencias que pueden ser descargadas (/node_modules)
		Coverage del testing (/coverage)
-->


<!--
	Restaurar la versión previa
		git restore index.html			-> Restaurar el archivo index.html
		git restore .					-> Restaurar todo el directorio de trabajo
		git restore '*.js'				-> Restaurar todos los archivos terminados en *.js
		
	Nota: esto hará que pierdas los cambios que habías realizado en el archivo
-->

rm nombreProyecto.txt -> Eliminar un archivo del directorio de trabajo
git status -> Me muestra el archivo eliminado
git add nombreProyecto.txt -> Para guardar el cambio(eliminado) en state
git status -> Para ver que esta ocurriendo
git commit -m "Eliminando archivo" -> Dar el nombre a un cambio en el documento
**Es igual a**
git rm nombreProyecto.txt
git status
git restore --staged nombreProyecto.txt
git status

**Recuperar un archivo borrado**
git restore nombreProyecto.txt
git status
ls
git add nombreProyecto.txt

**Cambiar el nombre del archivo**
mv nombreProyecto.txt nombreProyectos.txt
git add nombreProyectos.txt
**Es igual a**
git mv nombreProyecto.txt nombreProyectos.txt
git status
git commit -m "Cambiando el nombre del archivo"

**Crear un archivo que no se guarde en el state de git**
**Crear un archivo con el nombre de '.env'**
**Opcional: Crear dos variables dentro del archivo**
password = 1234567
user = victor
**Crear un archivo con el nombre de '.gitignore'**
**Dentro del archivo escribir el nombre de un archivo, carpetas o ruta que se va a ignorar**
**Por ejemplo escribir dentro '.env'**
git add .gitignore
git commit -m "Agregando archivo gitignore" 

**En vez de escribir 'git status' podemos usar**
git status -s


<!--
	Podemos ver con detalle el ultimo commit realizado.
		git diff
	
	Para salir de la pantalla de muestra, presionamos la letra Q
-->


<!--
	Para ver el historial de los cambios guardados por los COMMITs
		git log 				-> Muestra 4 puntos -> El codigo del commit, autor (usuario y correo), fecha completa, mensaje.
		git log -p				-> Muestra el detalle por archivos y la diferencia de ese commit. Precionando <Enter> para ver otros resultados
		git log -p -1			-> Muestra el ultimo detalle
		git log -p -2			-> Muestra los dos ultimos detalles
		git log --graph			-> Muestra el historial de los cambios guardados pero tipo rama. Muestra 4 puntos -> El codigo del commit, autor (usuario y correo), fecha completa, mensaje.
		git log --graph --pretty=oneline				-> Muestra el codigo del commit y el mensaje en una linea.
		git log --graph --decorate --all --one			-> Muestra un resumen del codigo del commit y el mensaje en una linea.
		git log --stat			-> Muestra un resumen de los cambio en el archivo
		git log --oneline		-> Muestra en una linea toda la informacion del COMMIT
		git log --pretty=oneline						-> Muestra en una linea
		git log --pretty=format:"%H - %an - %ad - %s"	->Consulta en https://git-scm.com/book/es/v2/Fundamentos-de-Git-Ver-el-Historial-de-Confirmaciones
	
	Para salir de la pantalla con la letra Q
-->


<!--
	Como usar un alias en sentencias con git log - Esta sentencia se almacenara en el archivo de config de la carpeta .git
		Utilizamos el git config para crear el alias.
			Ejemplo. Almacenamos el alias en el nombre tree:
				git config --global alias.tree "log --graph --decorate --all --oneline"
				git tree <enter>		-> Ejecutar el alias
-->


<!--
	Editar el ultimo comentario/mensaje del commit. Es aconsejable solo cambiar en el repositorio local y no en el global.
	Es muy útil pero sólo funciona con el último commit y siempre y cuando NO esté publicado en el repositorio remoto.
	Dos opciones. La ultima es la mas usada:
		git commit --amend
		git commit --amend -m 'Aqui va el nuevo mensaje'
	
	Se abrira el editor para editar el comentario
-->


<!--
	Elimina/retroceder un commit. No elimina el cambio del archivo, solo elimina/retrocede el commit
		git reset --soft HEAD~1		-> El 1 significa el ultimo commit

	Elimina/retroceder un commit. Si elimina el cambio del archivo, y elimina/retrocede el commit
		git reset --hard HEAD~1

	Elimina/Retrocede al commit que uno desea y se combierte en HEAD, para eso necesitamos el numero del id_commit, podemos consultar con el git log --online
		git reset --hart aqui_id_commit

	Ver todos los COMMITs
		git reflog
-->


<!--Regresar el estado de actualizado a NO actualizado
		git reset HEAD nombreArchivo.txt
-->


<!--
	Elimina el ultimo commit. Los datos del documento regresan a como estaban antes.
		git checkout -- nombreArchivo.txt
		git checkout -- '*.md'					-> restaurar todos los archivos markdown
		git checkout .							-> restaurar todo el directorio de trabajo
-->


<!--
	Agregar etiquetas a los cambios.
	Agregar version de terminado de un proyecto.
	Desde la carpeta principal local, usando la terminal, escribir:
		git tag 15-09-24v1 -m "Version 1 del proyecto"	-> Ejemplo etiquetado
		git tag nombre_etiqueta							-> Primera opcion
		git tag -a v1.0 -m "Mi primera version con git"	-> Segunda opcion
		
		git tab											-> Consultar la version
		
	Consultar la tag creada:
		git log --oneline

	Subir el tag al remoto(github):
		git push --tags
	Nota: Dentro de github, en el repositorio del proyecto, y en la pestaña de Code -> Tags. Podemos descargar el proyecto con la extension .zip o tar.gz
		
	Eliminar etiquetas
		git tag --delete v1.0
		git tag --d v1.0
		git log o git tag								-> Consulta que se haya eliminado la etiqueta
-->

<!--Agrega etiqueta a un especifico commit guardado>
git log -> Para coger los 7 primeros digitos y copiar
git tag -a v1.0 pegarDigitosAqui
**Escribir un comentario de la version por ejemplo "Mi primera version con git"**
git log -> Para verificar que este asignada la etiqueta
**Otra forma de guardar la etiqueta directamente con el mensaje**
git tag -a v1.0.1 -m "Mi segunda version" pegarDigitosAqui
git log -> Para verificar que este asignada la etiqueta



<!--Ver lista de las versiones de las etiquetas-->
git tag
git show nombreEtiqueta -> Vemos el detalle que tiene la etiqueta 


<!--
	ACTUALIZAR EL LOCAL (Es cuando hacemos cambio el remoto y tenemos que actualizar el local)
	Nos ubicamos en carpeta del proyecto principal, y usando la terminal. Digitar:
		git pull
-->


<!--
	DESCARGAR UN PROYECTO DESDE GITHUB AL LOCAL(PC)
	Dentro del proyecto en la pagina de github. Pestaña Code. En el boton de color verde Code. Copiar el link de copia url http://
	Luego ubicarnos en la carpeta del pc donde vamos a almacenar el proyecto. Abrir la termina de 'Git Bash Here' y escribir:
		git clone pegamos_link_copiado_de_github
-->


<!--
	Consultar la lista de ramas y la que esta con asterisco es la que esta actualmente
		git branch 						->
		git branch --show-current		-> Muestra el nombre de la rama en la que estamos, pero sin el asterisco
		
	Solo crea una rama:
		git branch nombre-rama			-> El nombre debe ser con minuscula y juntamos las palabras con el guion.
		git log --oneline				-> Consultamos los commits y nos indica la rama creada

	Para cambiarnos de rama, debemos tener abierto VSC para ver el archivo o usar 'Git Bash Here':
		git checkout nombre-rama		-> Para pasarnos/cambiarnos a otra rama
		git checkout main				-> Para pasarnos/cambiarnos a la rama principal

	Crear una rama y al mismo tiempo pasarnos a la rama creada:
	Es la menos usada:
		git checkout -b nombre-rama		-> Con esto ya estariamos en la rama creada. Antes de crear una rama debemos estar en la rama principal para que haga la copia de ahi

	Cambiar el nombre/renombrar de la rama:
		git branch -m nuevo-nombre-rama	-> Cambiar el nombre (renombrar) a la rama. Debemos estar en rama que vamos a cambiar el nombre
		git branch -m antiguo-nombre-rama' 'nuevo-nombre-rama		-> Cambiar el nombre a la rama. Debemos estar en rama main/principal

	ELIMINAR UNA RAMA EN EL REPOSITORIO LOCAL DE GIT
	Debemos estar en la rama principal main o master
		git branch -d nombre-rama-secundaria	-> Debemos estar en la rama main/principal
		git log --oneline						-> Para consultar los commits realizados
-->


<!--
	Con git switch:
		git switch 'nombre-rama'	-> Este comando se utiliza para cambiar a una rama existente. Ya trae con toda la informacion de la rama principal
		git switch main				-> Regresamos o nos pasamos a la rama principal
	
	Otra manera de crear una rama:
	El modificador -c es una abreviatura de --create, y se utiliza para crear una nueva rama y cambiar a ella en un solo paso. Ademas cuando se crea la rama, trae toda la informacion de la rama padre
	Si la rama especificada no existe, este comando la creará a partir de la rama actual y luego cambiará a la nueva rama.
		git switch -c 'nombre-rama'	->
-->


<!--
	FUSIONAR/CONVINAR RAMAS (MERGE)
	Proceso que permite convinar varias lineas independientes de desarrollo en una sola rama.
	Para fusionar dos ramas, debes estar en la rama que recibira la fusion/cambios.
	Despues de fusionar/convinar las ramas podemos eliminar la rama secundaria.
		git checkout rama-principal			-> Nos hubicamos en la rama principal que va a recibir los cambios
		git merge nombre-rama-secundaria	-> El nombre de la rama secundaria que tiene los cambios
		git merge --continue				-> Cuando existe conflicto al convinar dos ramas y despues de solucionar escribimos esa linea
-->

**Muestra/Visualizar el contenido/datos del archivo y lo muestra en la terminal**
cat nombreArchivo.txt


<!--
	CONFIGURAR HTTPS CON UN TOKEN:
		En la pagina de GitHub ingresmos al repositorio que queremos clonar
		Click en el boton de color verde <Code>
		Click en la pestaña 'HTTPS'
		Click en el icono de copiar, para copiar el link del repositorio
		En la PC nos ubicamos en la carpeta que va a recibir el repositorio, y abrimos la terminal
		En la terminal escribimos:
			git clone gh repo clone rivera-vict/mi-primer-repositorio <Enter>
		En gitbash podemos verificar si existe un repositorio remoto
			git remove -v

			La respuesta seria:
				origin link-repositorio (fetch)
				origin link-repositorio (push)
	
	Click en Settings
	En la parte izquierda inferior. Click en 'Developer setting'
	En la parte izquierda. Click en 'Personal access tokens'
	Click en 'Tokens (clasic)'
	Click en texto 'Generate a personal access token'
	Escribir una pequeña descripcion para que es el uso del token
	Asignar el tiempo de expiracion
	Seleccionar el scopes
		Son los permisos
	Click en el boton <Generate token>
	Copiar el token generado y pegar en otro archivo para utilizarlo despues

		Despues de crear el repositorio en la nube
		Escribimos en el archivo local
		git remote add origin https://github.com/libreriavict/practischool.git
		Despues
		git push -u origin main
-->


<!--
	Clonar un repositorio del internet(github) al computador mediante GitBash
		Abrir GitHub y ubicarnos en el repositorio que vamos a clonar
			Clic en la pestaña 'Code'
			Clic en el boton de color verde que dice 'Code'
			Clic en la pestaña 'Local'
			Clic en la pestaña 'HTTPS'
			Clic en el icono de copiar url
		Dentro de la carpeta donde vamos a guardar el proyecto clonado.
			Abrir la terminal y pegar el siguiente comando. Ejemplo:
				https://github.com/rivera-vict/prueba_codigo.git
				(rivera-vict, es el nombre del usuario, y prueba_codigo.git, es el nombre del repositorio)
		Despues de modificar los archivos:
			No ubicamos dentro de la carpeta del nombre del repositorio y escribimos:
				- git add .
				- git commit -m 'detalle referencial al cambio'
				- git push origin main
				Luego actualizamos en GitHub y podemos ver los cambio guardados
-->


<!--
	TRAER LA ACTUALIZACION DE LA RAMA MAIN A LA RAMA SECUNDARIA:

	ACTUALIZAR EL REPOSITORIO DE GITHUB DESDE EL REPOSITORIO LOCAL
		Estar en la carpeta del proyecto/repositorio y digitar en la terminal
		Ubicarnos en la rama padre del proyecto, que sera main.
		La palabra main hace referencia a la rama
			git pull origin main
			git log			-> Podemos ver el historial de los commits (es opcional ejercutar este comando)
		
	UBICARNOS EN LA RAMA QUE QUEREMOS ACTUALIZAR - OSEA TRAER LOS CAMBIO DE LA RAMA MAIN A LA RAMA secundaria
		git switch 'nombreRamaSecundaria'		-> Nos dirigimos a la rama secundaria.
		git merge main							-> Digitamos el main porque tiene la informacion actual que pasaremos a la rama secundaria

	
	OTRA MANERA DE TENER ACTUALIZADA LA RAMA - DESDE GITHUB:
		Estar dentro del proyecto
		Clic en la pestaña 'Settings'
		Deslizamos hacia abajo hasta llegar al titulo 'Pull Requests'
			Marcamos la casilla que dice 'Always suggest updating pull requests branches'
-->


<!--
	CONSULTAR SI ES QUE EXISTEN CAMBIOS EN EL REPOSITORIO DE GITHUB PARA PC
		En la terminal 
			git fetch origin
			git checkout origin/main		-> Para ver cuales son los cambios
-->


<!--
	Realizar un commit temporal solo en la rama local que se trabaja, para trabajar con otra rama
	Digitamos las dos lineas por separado:
		git stash
		git stash list
		git switch nombre_rama_cambiar
-->

REFERENCIAS:

->	Aprende Git y GitHub - Curso desde Cero
	freeCodeCamp Español
	https://www.youtube.com/watch?v=mBYSUUnMt9M
	Tiempo: 5:32:54

->	Curso de GIT y GITHUB desde CERO para PRINCIPIANTES
	MoureDev by Brais Moure
	https://www.youtube.com/watch?v=3GymExBkKjE
	Tiempo: 5:05:21 - 2:15:21
